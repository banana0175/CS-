本课程希望教会您如何挖掘现有工具的潜力，并向您介绍一些新的工具。
也许我们还可以促使您想要去探索（甚至是去开发）更多的工具。 我们认为这是大多数计算机科学相关课程中缺少的重要一环。

Lecture one:Course Overview + The Shell

几乎所有您能够接触到的平台都支持某种形式的 shell，有些甚至还提供了多种 shell 供您选择。
虽然它们之间有些细节上的差异，但是其核心功能都是一样的：它允许你执行程序，输入并获取某种半结构化的输出。
本节课我们会使用 Bourne Again SHell, 简称 “bash” 。 这是被最广泛使用的一种 shell，它的语法和其他的 shell 都是类似的。
打开shell 提示符（您输入指令的地方），您首先需要打开 终端 。您的设备通常都已经内置了终端，或者您也可以安装一个，非常简单。
您可以使用Windows Subsystem for Linux(https://docs.microsoft.com/en-us/windows/wsl/)在windows上以获取这一环境。

1.使用 shell
当您打开终端时，您会看到一个提示符，它看起来一般是这个样子的：
banana0175@localhost:~$
可以使用简单的有参数的指令：
banana0175@localhost:~$ date
结果显示：
Sat May 11 17:26:58 CST 2024

2.echo 程序将指定参数打印出来。
shell 基于空格分割命令并进行解析，然后执行第一个单词代表的程序，并将后续的单词作为程序可以访问的参数。
有：
banana0175@localhost:~$ echo hello
hello
或：
banana0175@localhost:~$ echo "Hello,world"(或者Hello \World,抑或'Hello World')
Hello,world

3.shell 是如何知道去哪里寻找 date 或 echo 的呢？其实，类似于 Python 或 Ruby，shell 是一个编程环境。
当你在 shell 中执行命令时，您实际上是在执行一段 shell 可以解释执行的简短代码。
如果你要求 shell 执行某个指令，但是该指令并不是 shell 所了解的编程关键字，那么它会去咨询 环境变量 $PATH，它会列出当 shell 接到某条指令时，进行程序搜索的路径：
banana0175@localhost:~$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Windows/system32:
/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:
/mnt/d/Download/MATLABR2023b/runtime/win64:/mnt/d/Download/MATLABR2023b/bin:/mnt/d/dll:
/mnt/d/桌面/nodejs/:/mnt/d/nodejs/node_global/node_modules/node_cache:/mnt/d/nodejs/node_global/node_modules/node_global:
/mnt/c/Users/96542/miniconda3/Library/mingw-w64/bin:/mnt/c/Users/96542/miniconda3/Library/usr/bin:
/mnt/c/Users/96542/AppData/Roaming/npm:/mnt/d/桌面/Microsoft VS Code/bin:/mnt/d/桌面/opencv/build/x64/vc16/bin:
当我们执行 echo 命令时，shell 了解到需要执行 echo 这个程序，随后它便会在 $PATH 中搜索由冒号所分割的一系列目录，基于名字搜索该程序。
当找到该程序时便执行（假定该文件是 可执行程序，后续课程将详细讲解）。确定某个程序名代表的是哪个具体的程序，可以使用 which 程序。我们也可以绕过 $PATH，通过直接指定需要执行的程序的路径来执行该程序.

 4.Linux 文件系统。如果某个路径以/开头，那么它是一个绝对路径，其他的都是相对路径。绝对路径是完全定义文件位置的路径。
 相对路径是指相对于当前工作目录的路径，当前工作目录可以使用 pwd 命令来获取。
 banana0175@localhost:~$ pwd
/home/banana0175

5.切换目录需要使用 cd 命令。在路径中，. 表示的是当前目录，而 .. 表示上级目录：
banana0175@localhost:~$ pwd
/home/banana0175
banana0175@localhost:~$ cd/home
-bash: cd/home: No such file or directory
banana0175@localhost:~$ cd /home
banana0175@localhost:/home$ cd ..
banana0175@localhost:/$ cd ./home
banana0175@localhost:/home$ cd banana0175
banana0175@localhost:~$ pwd
/home/banana0175

6.为了查看指定目录下包含哪些文件，我们使用 ls 命令:
banana0175@localhost:/home$ cd ..
banana0175@localhost:/$ ls
bin   dev  home  lib    lib64   lost+found  mnt  proc  run   semester  srv  tmp  var
boot  etc  init  lib32  libx32  media       opt  root  sbin  snap      sys  usr
值得注意的是:~代表主目录,同时-代表之前所在的文件夹
关于更多用法，可以：
banana0175@localhost:/$ ls --help
其中值得注意的是 -l，可以用长格式输出目录
lrwxrwxrwx   1 root root       7 Nov 23 05:36 bin -> usr/bin
drwxr-xr-x   2 root root    4096 Apr 18  2022 boot
首先，本行第一个字符 d 表示 missing 是一个目录。然后接下来的九个字符，每三个字符构成一组。 （rwx）. 它们分别代表了文件所有者（missing），用户组（users） 以及其他所有人具有的权限。
其中 - 表示该用户不具备相应的权限。从上面的信息来看，只有文件所有者可以修改（w），missing 文件夹 （例如，添加或删除文件夹中的文件）。
为了进入某个文件夹，用户需要具备该文件夹以及其父文件夹的“搜索”权限（以“可执行”：x）权限表示。为了列出它的包含的内容，用户必须对该文件夹具备读权限（r）。
对于文件来说，权限的意义也是类似的。注意，/bin 目录下的程序在最后一组，即表示所有人的用户组中，均包含 x 权限，也就是说任何人都可以执行这些程序。

 7.mv（用于重命名或移动文件）、 cp（拷贝文件）以及 mkdir（新建文件夹）也是重要的命令。
 man会接受一个程序名作为参数，然后将它的文档（用户手册）展现给您。
